// Autogenerated from Pigeon (v1.0.14), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.codeheadlabs.zendesk.pigeon;

import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class ZendeskPigeon {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class InitializeRequest {
    private String accountKey;
    public String getAccountKey() { return accountKey; }
    public void setAccountKey(String setterArg) { this.accountKey = setterArg; }

    private String appId;
    public String getAppId() { return appId; }
    public void setAppId(String setterArg) { this.appId = setterArg; }

    private String deviceToken;
    public String getDeviceToken() { return deviceToken; }
    public void setDeviceToken(String setterArg) { this.deviceToken = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("accountKey", accountKey);
      toMapResult.put("appId", appId);
      toMapResult.put("deviceToken", deviceToken);
      return toMapResult;
    }
    static InitializeRequest fromMap(Map<String, Object> map) {
      InitializeRequest fromMapResult = new InitializeRequest();
      Object accountKey = map.get("accountKey");
      fromMapResult.accountKey = (String)accountKey;
      Object appId = map.get("appId");
      fromMapResult.appId = (String)appId;
      Object deviceToken = map.get("deviceToken");
      fromMapResult.deviceToken = (String)deviceToken;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SetDepartmentRequest {
    private String department;
    public String getDepartment() { return department; }
    public void setDepartment(String setterArg) { this.department = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("department", department);
      return toMapResult;
    }
    static SetDepartmentRequest fromMap(Map<String, Object> map) {
      SetDepartmentRequest fromMapResult = new SetDepartmentRequest();
      Object department = map.get("department");
      fromMapResult.department = (String)department;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StartChatRequest {
    private Boolean isPreChatFormEnabled;
    public Boolean getIsPreChatFormEnabled() { return isPreChatFormEnabled; }
    public void setIsPreChatFormEnabled(Boolean setterArg) { this.isPreChatFormEnabled = setterArg; }

    private Boolean isOfflineFormEnabled;
    public Boolean getIsOfflineFormEnabled() { return isOfflineFormEnabled; }
    public void setIsOfflineFormEnabled(Boolean setterArg) { this.isOfflineFormEnabled = setterArg; }

    private Boolean isAgentAvailabilityEnabled;
    public Boolean getIsAgentAvailabilityEnabled() { return isAgentAvailabilityEnabled; }
    public void setIsAgentAvailabilityEnabled(Boolean setterArg) { this.isAgentAvailabilityEnabled = setterArg; }

    private Boolean isChatTranscriptPromptEnabled;
    public Boolean getIsChatTranscriptPromptEnabled() { return isChatTranscriptPromptEnabled; }
    public void setIsChatTranscriptPromptEnabled(Boolean setterArg) { this.isChatTranscriptPromptEnabled = setterArg; }

    private String messagingName;
    public String getMessagingName() { return messagingName; }
    public void setMessagingName(String setterArg) { this.messagingName = setterArg; }

    private String iosBackButtonTitle;
    public String getIosBackButtonTitle() { return iosBackButtonTitle; }
    public void setIosBackButtonTitle(String setterArg) { this.iosBackButtonTitle = setterArg; }

    private Long iosNavigationBarColor;
    public Long getIosNavigationBarColor() { return iosNavigationBarColor; }
    public void setIosNavigationBarColor(Long setterArg) { this.iosNavigationBarColor = setterArg; }

    private Long iosNavigationTitleColor;
    public Long getIosNavigationTitleColor() { return iosNavigationTitleColor; }
    public void setIosNavigationTitleColor(Long setterArg) { this.iosNavigationTitleColor = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("isPreChatFormEnabled", isPreChatFormEnabled);
      toMapResult.put("isOfflineFormEnabled", isOfflineFormEnabled);
      toMapResult.put("isAgentAvailabilityEnabled", isAgentAvailabilityEnabled);
      toMapResult.put("isChatTranscriptPromptEnabled", isChatTranscriptPromptEnabled);
      toMapResult.put("messagingName", messagingName);
      toMapResult.put("iosBackButtonTitle", iosBackButtonTitle);
      toMapResult.put("iosNavigationBarColor", iosNavigationBarColor);
      toMapResult.put("iosNavigationTitleColor", iosNavigationTitleColor);
      return toMapResult;
    }
    static StartChatRequest fromMap(Map<String, Object> map) {
      StartChatRequest fromMapResult = new StartChatRequest();
      Object isPreChatFormEnabled = map.get("isPreChatFormEnabled");
      fromMapResult.isPreChatFormEnabled = (Boolean)isPreChatFormEnabled;
      Object isOfflineFormEnabled = map.get("isOfflineFormEnabled");
      fromMapResult.isOfflineFormEnabled = (Boolean)isOfflineFormEnabled;
      Object isAgentAvailabilityEnabled = map.get("isAgentAvailabilityEnabled");
      fromMapResult.isAgentAvailabilityEnabled = (Boolean)isAgentAvailabilityEnabled;
      Object isChatTranscriptPromptEnabled = map.get("isChatTranscriptPromptEnabled");
      fromMapResult.isChatTranscriptPromptEnabled = (Boolean)isChatTranscriptPromptEnabled;
      Object messagingName = map.get("messagingName");
      fromMapResult.messagingName = (String)messagingName;
      Object iosBackButtonTitle = map.get("iosBackButtonTitle");
      fromMapResult.iosBackButtonTitle = (String)iosBackButtonTitle;
      Object iosNavigationBarColor = map.get("iosNavigationBarColor");
      fromMapResult.iosNavigationBarColor = (iosNavigationBarColor == null) ? null : ((iosNavigationBarColor instanceof Integer) ? (Integer)iosNavigationBarColor : (Long)iosNavigationBarColor);
      Object iosNavigationTitleColor = map.get("iosNavigationTitleColor");
      fromMapResult.iosNavigationTitleColor = (iosNavigationTitleColor == null) ? null : ((iosNavigationTitleColor instanceof Integer) ? (Integer)iosNavigationTitleColor : (Long)iosNavigationTitleColor);
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class SetVisitorInfoRequest {
    private String name;
    public String getName() { return name; }
    public void setName(String setterArg) { this.name = setterArg; }

    private String email;
    public String getEmail() { return email; }
    public void setEmail(String setterArg) { this.email = setterArg; }

    private String phoneNumber;
    public String getPhoneNumber() { return phoneNumber; }
    public void setPhoneNumber(String setterArg) { this.phoneNumber = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("name", name);
      toMapResult.put("email", email);
      toMapResult.put("phoneNumber", phoneNumber);
      return toMapResult;
    }
    static SetVisitorInfoRequest fromMap(Map<String, Object> map) {
      SetVisitorInfoRequest fromMapResult = new SetVisitorInfoRequest();
      Object name = map.get("name");
      fromMapResult.name = (String)name;
      Object email = map.get("email");
      fromMapResult.email = (String)email;
      Object phoneNumber = map.get("phoneNumber");
      fromMapResult.phoneNumber = (String)phoneNumber;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class VisitorTagsRequest {
    private List<String> tags;
    public List<String> getTags() { return tags; }
    public void setTags(List<String> setterArg) { this.tags = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("tags", tags);
      return toMapResult;
    }
    static VisitorTagsRequest fromMap(Map<String, Object> map) {
      VisitorTagsRequest fromMapResult = new VisitorTagsRequest();
      Object tags = map.get("tags");
      fromMapResult.tags = (List<String>)tags;
      return fromMapResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class VisitorNoteRequest {
    private String note;
    public String getNote() { return note; }
    public void setNote(String setterArg) { this.note = setterArg; }

    Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("note", note);
      return toMapResult;
    }
    static VisitorNoteRequest fromMap(Map<String, Object> map) {
      VisitorNoteRequest fromMapResult = new VisitorNoteRequest();
      Object note = map.get("note");
      fromMapResult.note = (String)note;
      return fromMapResult;
    }
  }
  private static class ChatApiCodec extends StandardMessageCodec {
    public static final ChatApiCodec INSTANCE = new ChatApiCodec();
    private ChatApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return InitializeRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return SetDepartmentRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return StartChatRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof InitializeRequest) {
        stream.write(128);
        writeValue(stream, ((InitializeRequest) value).toMap());
      } else 
      if (value instanceof SetDepartmentRequest) {
        stream.write(129);
        writeValue(stream, ((SetDepartmentRequest) value).toMap());
      } else 
      if (value instanceof StartChatRequest) {
        stream.write(130);
        writeValue(stream, ((StartChatRequest) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ChatApi {
    void initialize(InitializeRequest request);
    void setDepartment(SetDepartmentRequest request);
    void startChat(StartChatRequest request);

    /** The codec used by ChatApi. */
    static MessageCodec<Object> getCodec() {
      return ChatApiCodec.INSTANCE;
    }

    /** Sets up an instance of `ChatApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ChatApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChatApi.initialize", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              InitializeRequest requestArg = (InitializeRequest)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              api.initialize(requestArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChatApi.setDepartment", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              SetDepartmentRequest requestArg = (SetDepartmentRequest)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              api.setDepartment(requestArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ChatApi.startChat", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              StartChatRequest requestArg = (StartChatRequest)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              api.startChat(requestArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static class ProfileApiCodec extends StandardMessageCodec {
    public static final ProfileApiCodec INSTANCE = new ProfileApiCodec();
    private ProfileApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return SetVisitorInfoRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return VisitorNoteRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return VisitorTagsRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof SetVisitorInfoRequest) {
        stream.write(128);
        writeValue(stream, ((SetVisitorInfoRequest) value).toMap());
      } else 
      if (value instanceof VisitorNoteRequest) {
        stream.write(129);
        writeValue(stream, ((VisitorNoteRequest) value).toMap());
      } else 
      if (value instanceof VisitorTagsRequest) {
        stream.write(130);
        writeValue(stream, ((VisitorTagsRequest) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface ProfileApi {
    void setVisitorInfo(SetVisitorInfoRequest request);
    void addVisitorTags(VisitorTagsRequest request);
    void removeVisitorTags(VisitorTagsRequest request);
    void setVisitorNote(VisitorNoteRequest request);
    void appendVisitorNote(VisitorNoteRequest request);
    void clearVisitorNotes();

    /** The codec used by ProfileApi. */
    static MessageCodec<Object> getCodec() {
      return ProfileApiCodec.INSTANCE;
    }

    /** Sets up an instance of `ProfileApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, ProfileApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ProfileApi.setVisitorInfo", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              SetVisitorInfoRequest requestArg = (SetVisitorInfoRequest)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              api.setVisitorInfo(requestArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ProfileApi.addVisitorTags", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              VisitorTagsRequest requestArg = (VisitorTagsRequest)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              api.addVisitorTags(requestArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ProfileApi.removeVisitorTags", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              VisitorTagsRequest requestArg = (VisitorTagsRequest)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              api.removeVisitorTags(requestArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ProfileApi.setVisitorNote", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              VisitorNoteRequest requestArg = (VisitorNoteRequest)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              api.setVisitorNote(requestArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ProfileApi.appendVisitorNote", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              VisitorNoteRequest requestArg = (VisitorNoteRequest)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              api.appendVisitorNote(requestArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.ProfileApi.clearVisitorNotes", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.clearVisitorNotes();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", null);
    return errorMap;
  }
}
