// Autogenerated from Pigeon (v1.0.14), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "zendesk.pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ? error.code : [NSNull null]),
        @"message": (error.message ? error.message : [NSNull null]),
        @"details": (error.details ? error.details : [NSNull null]),
        };
  }
  return @{
      @"result": (result ? result : [NSNull null]),
      @"error": errorDict,
      };
}

@interface InitializeRequest ()
+ (InitializeRequest *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface SetDepartmentRequest ()
+ (SetDepartmentRequest *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface StartChatRequest ()
+ (StartChatRequest *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface SetVisitorInfoRequest ()
+ (SetVisitorInfoRequest *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface VisitorTagsRequest ()
+ (VisitorTagsRequest *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface VisitorNoteRequest ()
+ (VisitorNoteRequest *)fromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation InitializeRequest
+ (InitializeRequest *)fromMap:(NSDictionary *)dict {
  InitializeRequest *result = [[InitializeRequest alloc] init];
  result.accountKey = dict[@"accountKey"];
  if ((NSNull *)result.accountKey == [NSNull null]) {
    result.accountKey = nil;
  }
  result.appId = dict[@"appId"];
  if ((NSNull *)result.appId == [NSNull null]) {
    result.appId = nil;
  }
  result.deviceToken = dict[@"deviceToken"];
  if ((NSNull *)result.deviceToken == [NSNull null]) {
    result.deviceToken = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.accountKey ? self.accountKey : [NSNull null]), @"accountKey", (self.appId ? self.appId : [NSNull null]), @"appId", (self.deviceToken ? self.deviceToken : [NSNull null]), @"deviceToken", nil];
}
@end

@implementation SetDepartmentRequest
+ (SetDepartmentRequest *)fromMap:(NSDictionary *)dict {
  SetDepartmentRequest *result = [[SetDepartmentRequest alloc] init];
  result.department = dict[@"department"];
  if ((NSNull *)result.department == [NSNull null]) {
    result.department = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.department ? self.department : [NSNull null]), @"department", nil];
}
@end

@implementation StartChatRequest
+ (StartChatRequest *)fromMap:(NSDictionary *)dict {
  StartChatRequest *result = [[StartChatRequest alloc] init];
  result.isPreChatFormEnabled = dict[@"isPreChatFormEnabled"];
  if ((NSNull *)result.isPreChatFormEnabled == [NSNull null]) {
    result.isPreChatFormEnabled = nil;
  }
  result.isOfflineFormEnabled = dict[@"isOfflineFormEnabled"];
  if ((NSNull *)result.isOfflineFormEnabled == [NSNull null]) {
    result.isOfflineFormEnabled = nil;
  }
  result.isAgentAvailabilityEnabled = dict[@"isAgentAvailabilityEnabled"];
  if ((NSNull *)result.isAgentAvailabilityEnabled == [NSNull null]) {
    result.isAgentAvailabilityEnabled = nil;
  }
  result.isChatTranscriptPromptEnabled = dict[@"isChatTranscriptPromptEnabled"];
  if ((NSNull *)result.isChatTranscriptPromptEnabled == [NSNull null]) {
    result.isChatTranscriptPromptEnabled = nil;
  }
  result.messagingName = dict[@"messagingName"];
  if ((NSNull *)result.messagingName == [NSNull null]) {
    result.messagingName = nil;
  }
  result.iosBackButtonTitle = dict[@"iosBackButtonTitle"];
  if ((NSNull *)result.iosBackButtonTitle == [NSNull null]) {
    result.iosBackButtonTitle = nil;
  }
  result.iosNavigationBarColor = dict[@"iosNavigationBarColor"];
  if ((NSNull *)result.iosNavigationBarColor == [NSNull null]) {
    result.iosNavigationBarColor = nil;
  }
  result.iosNavigationTitleColor = dict[@"iosNavigationTitleColor"];
  if ((NSNull *)result.iosNavigationTitleColor == [NSNull null]) {
    result.iosNavigationTitleColor = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.isPreChatFormEnabled ? self.isPreChatFormEnabled : [NSNull null]), @"isPreChatFormEnabled", (self.isOfflineFormEnabled ? self.isOfflineFormEnabled : [NSNull null]), @"isOfflineFormEnabled", (self.isAgentAvailabilityEnabled ? self.isAgentAvailabilityEnabled : [NSNull null]), @"isAgentAvailabilityEnabled", (self.isChatTranscriptPromptEnabled ? self.isChatTranscriptPromptEnabled : [NSNull null]), @"isChatTranscriptPromptEnabled", (self.messagingName ? self.messagingName : [NSNull null]), @"messagingName", (self.iosBackButtonTitle ? self.iosBackButtonTitle : [NSNull null]), @"iosBackButtonTitle", (self.iosNavigationBarColor ? self.iosNavigationBarColor : [NSNull null]), @"iosNavigationBarColor", (self.iosNavigationTitleColor ? self.iosNavigationTitleColor : [NSNull null]), @"iosNavigationTitleColor", nil];
}
@end

@implementation SetVisitorInfoRequest
+ (SetVisitorInfoRequest *)fromMap:(NSDictionary *)dict {
  SetVisitorInfoRequest *result = [[SetVisitorInfoRequest alloc] init];
  result.name = dict[@"name"];
  if ((NSNull *)result.name == [NSNull null]) {
    result.name = nil;
  }
  result.email = dict[@"email"];
  if ((NSNull *)result.email == [NSNull null]) {
    result.email = nil;
  }
  result.phoneNumber = dict[@"phoneNumber"];
  if ((NSNull *)result.phoneNumber == [NSNull null]) {
    result.phoneNumber = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.name ? self.name : [NSNull null]), @"name", (self.email ? self.email : [NSNull null]), @"email", (self.phoneNumber ? self.phoneNumber : [NSNull null]), @"phoneNumber", nil];
}
@end

@implementation VisitorTagsRequest
+ (VisitorTagsRequest *)fromMap:(NSDictionary *)dict {
  VisitorTagsRequest *result = [[VisitorTagsRequest alloc] init];
  result.tags = dict[@"tags"];
  if ((NSNull *)result.tags == [NSNull null]) {
    result.tags = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.tags ? self.tags : [NSNull null]), @"tags", nil];
}
@end

@implementation VisitorNoteRequest
+ (VisitorNoteRequest *)fromMap:(NSDictionary *)dict {
  VisitorNoteRequest *result = [[VisitorNoteRequest alloc] init];
  result.note = dict[@"note"];
  if ((NSNull *)result.note == [NSNull null]) {
    result.note = nil;
  }
  return result;
}
- (NSDictionary *)toMap {
  return [NSDictionary dictionaryWithObjectsAndKeys:(self.note ? self.note : [NSNull null]), @"note", nil];
}
@end

@interface ChatApiCodecReader : FlutterStandardReader
@end
@implementation ChatApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [InitializeRequest fromMap:[self readValue]];
    
    case 129:     
      return [SetDepartmentRequest fromMap:[self readValue]];
    
    case 130:     
      return [StartChatRequest fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface ChatApiCodecWriter : FlutterStandardWriter
@end
@implementation ChatApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[InitializeRequest class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[SetDepartmentRequest class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[StartChatRequest class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface ChatApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation ChatApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[ChatApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[ChatApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *ChatApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    ChatApiCodecReaderWriter *readerWriter = [[ChatApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void ChatApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ChatApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ChatApi.initialize"
        binaryMessenger:binaryMessenger
        codec:ChatApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(initializeRequest:error:)], @"ChatApi api (%@) doesn't respond to @selector(initializeRequest:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        InitializeRequest *arg_request = args[0];
        FlutterError *error;
        [api initializeRequest:arg_request error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ChatApi.setDepartment"
        binaryMessenger:binaryMessenger
        codec:ChatApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setDepartmentRequest:error:)], @"ChatApi api (%@) doesn't respond to @selector(setDepartmentRequest:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        SetDepartmentRequest *arg_request = args[0];
        FlutterError *error;
        [api setDepartmentRequest:arg_request error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ChatApi.startChat"
        binaryMessenger:binaryMessenger
        codec:ChatApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(startChatRequest:error:)], @"ChatApi api (%@) doesn't respond to @selector(startChatRequest:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        StartChatRequest *arg_request = args[0];
        FlutterError *error;
        [api startChatRequest:arg_request error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface ProfileApiCodecReader : FlutterStandardReader
@end
@implementation ProfileApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [SetVisitorInfoRequest fromMap:[self readValue]];
    
    case 129:     
      return [VisitorNoteRequest fromMap:[self readValue]];
    
    case 130:     
      return [VisitorTagsRequest fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface ProfileApiCodecWriter : FlutterStandardWriter
@end
@implementation ProfileApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[SetVisitorInfoRequest class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[VisitorNoteRequest class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[VisitorTagsRequest class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface ProfileApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation ProfileApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[ProfileApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[ProfileApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *ProfileApiGetCodec() {
  static dispatch_once_t s_pred = 0;
  static FlutterStandardMessageCodec *s_sharedObject = nil;
  dispatch_once(&s_pred, ^{
    ProfileApiCodecReaderWriter *readerWriter = [[ProfileApiCodecReaderWriter alloc] init];
    s_sharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return s_sharedObject;
}


void ProfileApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<ProfileApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ProfileApi.setVisitorInfo"
        binaryMessenger:binaryMessenger
        codec:ProfileApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setVisitorInfoRequest:error:)], @"ProfileApi api (%@) doesn't respond to @selector(setVisitorInfoRequest:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        SetVisitorInfoRequest *arg_request = args[0];
        FlutterError *error;
        [api setVisitorInfoRequest:arg_request error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ProfileApi.addVisitorTags"
        binaryMessenger:binaryMessenger
        codec:ProfileApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(addVisitorTagsRequest:error:)], @"ProfileApi api (%@) doesn't respond to @selector(addVisitorTagsRequest:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        VisitorTagsRequest *arg_request = args[0];
        FlutterError *error;
        [api addVisitorTagsRequest:arg_request error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ProfileApi.removeVisitorTags"
        binaryMessenger:binaryMessenger
        codec:ProfileApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(removeVisitorTagsRequest:error:)], @"ProfileApi api (%@) doesn't respond to @selector(removeVisitorTagsRequest:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        VisitorTagsRequest *arg_request = args[0];
        FlutterError *error;
        [api removeVisitorTagsRequest:arg_request error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ProfileApi.setVisitorNote"
        binaryMessenger:binaryMessenger
        codec:ProfileApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setVisitorNoteRequest:error:)], @"ProfileApi api (%@) doesn't respond to @selector(setVisitorNoteRequest:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        VisitorNoteRequest *arg_request = args[0];
        FlutterError *error;
        [api setVisitorNoteRequest:arg_request error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ProfileApi.appendVisitorNote"
        binaryMessenger:binaryMessenger
        codec:ProfileApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(appendVisitorNoteRequest:error:)], @"ProfileApi api (%@) doesn't respond to @selector(appendVisitorNoteRequest:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        VisitorNoteRequest *arg_request = args[0];
        FlutterError *error;
        [api appendVisitorNoteRequest:arg_request error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [FlutterBasicMessageChannel
        messageChannelWithName:@"dev.flutter.pigeon.ProfileApi.clearVisitorNotes"
        binaryMessenger:binaryMessenger
        codec:ProfileApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(clearVisitorNotesWithError:)], @"ProfileApi api (%@) doesn't respond to @selector(clearVisitorNotesWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        [api clearVisitorNotesWithError:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
